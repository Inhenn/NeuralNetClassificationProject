# -*- coding: utf-8 -*-
"""HW5Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xz9VvgEg55C2kJ_HquI6Z5AiomUvjUDc
"""

import pandas as pd
from keras.models import Sequential
from keras.layers import Dense, Activation,merge
from keras.wrappers.scikit_learn import KerasClassifier, KerasRegressor
from sklearn.model_selection import GridSearchCV
from sklearn import datasets
from sklearn.model_selection import StratifiedShuffleSplit
from keras import regularizers
from keras.utils import to_categorical
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from keras.layers.normalization import BatchNormalization

import cv2

import keras
from keras.layers.normalization import BatchNormalization
from keras.layers import Input, Dense
from keras.models import Model
import os
import imageio
import pickle
from google.colab import drive
drive.mount('/content/drive')

"""# Task 1

load data
"""

iris = datasets.load_iris()
X = iris.data
y = iris.target
data_len = len(X)

y_binary = to_categorical(y)
X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.33, random_state=4)

def make_model(hid1=32,hid2=4,reg1=0.01,reg2=0.01):
  
    model = Sequential([
    Dense(hid1, input_shape=(4,),kernel_regularizer=regularizers.l2(reg1)),
    Activation('relu'),
    Dense(hid2,kernel_regularizer=regularizers.l2(reg2)),
    Activation('relu'),
    Dense(3),
    Activation('softmax')])
    model.compile("adam", "categorical_crossentropy", metrics=['accuracy'])

    return model

"""## Tuning model"""

clf = KerasClassifier(make_model)
param_grid = {'epochs':[100],  # epochs is fit parameter, not in make_model!
              'hid1': [16, 32],
              'hid2': [4, 8],
              'reg1':np.logspace(-2, 0, 3),
              'reg2':np.logspace(-2, 0, 3)}
grid = GridSearchCV(clf, param_grid=param_grid, cv=StratifiedShuffleSplit(n_splits=1))
grid.fit(X_train,y_train)

res = pd.DataFrame(grid.cv_results_)
res.pivot_table(index=["param_epochs", "param_hid1","param_hid2","param_reg1","param_reg2"],
                values=['mean_train_score', "mean_test_score"])

"""##  As we can see, one of the best parameter settings is first hidden layer 32, second hidder layer 4 and regularization for the first layer 0.01, for the second layer 1"""

y_true = [list(l).index(1) for l in  y_test]

print(classification_report(grid.predict(X_test),y_true))

"""## Above is the result on the testset using the best parameters"""





